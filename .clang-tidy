---
# Configure clang-tidy for this project.

# Here is an explanation for why some of the checks are disabled:
#
#  -bugprone-easily-swappable-parameters: this check is TEMPORARY disabled.
#  -bugprone-reserved-identifier: Some macros need to be defined for portability purpose.
#  -cppcoreguidelines-avoid-magic-numbers
#  -cppcoreguidelines-macro-usage
#  -cppcoreguidelines-avoid-non-const-global-variables,
#  -cppcoreguidelines-avoid-const-or-ref-data-members
#  -readability-magic-numbers: too many false positives in tests.
#
#  -google-build-namespaces: we think this feature is an important part of our
#      code base.
#
#  -google-runtime-references: conflicts with our code conventions.
#
#  -modernize-concat-nested-namespaces: clang-tidy recommends to concat namespaces,
#      we think the code is less readable in this form.
#
#  -modernize-use-default-member-init: clang-tidy recommends to concat namespaces,
#      we think the code is less readable in this form.
#
#  -modernize-use-nodiscard: too many false positives, as we use [[nodiscard]]
#      mostly in API headers.
#
#  -modernize-use-trailing-return-type: clang-tidy recommends using
#      `auto Foo() -> std::string { return ...; }`, we think the code is less
#      readable in this form.
#
#  -readability-identifier-length: too many errors we don't care about.
#
#  -readability-redundant-access-specifiers: conflicts with our code conventions.
#

# Clang-Tidy use POSIX ERE. More can be found here:
#   - https://stackoverflow.com/questions/61001314
#   - https://stackoverflow.com/questions/67165339

Checks: >
  bugprone-*,
  cert-msc32-c,
  cert-msc51-cpp,
  clang-analyzer-*,
  cppcoreguidelines-*,
  google-*,
  hicpp-*,
  llvm-namespace-comment,
  misc-*,
  modernize-*,
  performance-*,
  portability-*,
  readability-*,
  -bugprone-easily-swappable-parameters,
  -bugprone-reserved-identifier,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -cppcoreguidelines-avoid-const-or-ref-data-members,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -google-build-namespaces,
  -google-runtime-references,
  -modernize-concat-nested-namespaces,
  -modernize-use-default-member-init,
  -modernize-use-nodiscard,
  -modernize-use-trailing-return-type,
  -readability-identifier-length,
  -readability-magic-numbers,
  -readability-redundant-access-specifiers,
  -misc-const-correctness,
  -readability-identifier-length,
  -portability-simd-intrinsics
CheckOptions:
  - key: bugprone-assert-side-effect.AssertMacros
    value: 'assert,BPROTO_ASSERT,BPROTO_ASSERT_MSG'

  - key: bugprone-suspicious-enum-usage.StrictMode
    value: true

  - key: cert-msc32-c.DisallowedSeedTypes
    value: 'time_t,std::time_t'

  - key: cert-msc51-cpp.DisallowedSeedTypes
    value: 'time_t,std::time_t'

  - key: cppcoreguidelines-macro-usage.AllowedRegexp
    value: '^(BOOST_TEST_MODULE|MAGIC_ENUM_).*$'

  - key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted
    value: true
  - key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor
    value: true
  - key: hicpp-special-member-functions.AllowSoleDefaultDtor
    value: true
  - key: hicpp-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted
    value: true

  #- key: cppcoreguidelines-pro-type-member-init.IgnoreArrays
  #  value: true

  - key: hicpp-signed-bitwise.IgnorePositiveIntegerLiterals
    value: true

  - key: llvm-namespace-comment.ShortNamespaceLines
    value: '10'
  - key: llvm-namespace-comment.SpacesBeforeComments
    value: '1'

  - key: readability-function-size.ParameterThreshold
    value: '10'

FormatStyle: none
WarningsAsErrors: 'bugprone-*, cppcoreguidelines-*'
